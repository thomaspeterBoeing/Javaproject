public with sharing class ILHRatePageRules {

/*
parameters :- State & Product
mapQDSkipstlst - has decisions(application,email summary,paper kit)  with skip state for all products.
productDecisionSkipstmap - decision with product & its skip states. 

*/    
private static Map<string,list<string>> mapQDSkipstlst;
private static Map<string,Map<string,list<string>>> productDecisionSkipstmap;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
private static Map<string,list<string>> partnerQtDecisionmap;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
public static list<string> loadQuoteDecision(string state,string product){
    List<String> eligibleDecisions=new list<string>();
    if (mapQDSkipstlst==null || productDecisionSkipstmap==null){
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
        Quote_Decision_Option__mdt[] QuoteDecisions = [SELECT MasterLabel, Products__c, SkipStates__c FROM Quote_Decision_Option__mdt ORDER BY MasterLabel];
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
        Quote_Decision_Option__mdt[] QuoteDecisions = [SELECT MasterLabel,enabledForPartners__c, Products__c, SkipStates__c FROM Quote_Decision_Option__mdt order by MasterLabel];
        partnerQtDecisionmap=new Map<string,list<string>>();
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
        mapQDSkipstlst=new Map<string,list<string>>();
        productDecisionSkipstmap=new  Map<string,Map<string,list<string>>>();
        for (Quote_Decision_Option__mdt qd : QuoteDecisions) {
            List<String> skipStateList = new List<String>();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
            list<String> qdPartnerlist=new list<string>();
            if (!string.isEmpty(qd.enabledForPartners__c))
                qdPartnerlist=qd.enabledForPartners__c.split(',');
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
            if (!String.isBlank(qd.skipstates__C))
                skipStateList=qd.skipstates__C.split(',');
            if(qd.Products__c=='All Products'){
                mapQDSkipstlst.put(qd.Masterlabel,skipStateList);
            }else{
                if(!productDecisionSkipstmap.containsKey(qd.Masterlabel))
                    productDecisionSkipstmap.put(qd.Masterlabel,new Map<string,list<string>>());
                
                productDecisionSkipstmap.get(qd.Masterlabel).put(qd.Products__c,skipStateList);
            }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
            partnerQtDecisionmap.put(qd.MasterLabel,qdPartnerlist);
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
        }
    }    
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
    List<string> eligibleQDForPartners = new list<String>();

    for (String decision:partnerQtDecisionmap.keySet()) {
        if (partnerQtDecisionmap.get(decision).contains('All Partners') ||partnerQtDecisionmap.get(decision).contains(userinfo.getUserEmail())) 
            eligibleQDForPartners.add(decision);

    }
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
    for (String decision:mapQDSkipstlst.keyset()){
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
        if(!mapQDSkipstlst.get(decision).contains(state))
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
        if(!mapQDSkipstlst.get(decision).contains(state) && eligibleQDForPartners.contains(decision))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
            eligibleDecisions.add(decision);
    }
    for (String decision:productDecisionSkipstmap.keyset()){
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature
        if(productDecisionSkipstmap.containsKey(decision) && productDecisionSkipstmap.get(decision).containsKey(product) && !productDecisionSkipstmap.get(decision).get(product).contains(state))
====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
        if(eligibleQDForPartners.contains(decision) && productDecisionSkipstmap.containsKey(decision) && productDecisionSkipstmap.get(decision).containsKey(product) && !productDecisionSkipstmap.get(decision).get(product).contains(state))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
            eligibleDecisions.add(decision);
    }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<AUTO GENERATED BY CONFLICT EXTENSION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RatePageFeature

====================================AUTO GENERATED BY CONFLICT EXTENSION====================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>AUTO GENERATED BY CONFLICT EXTENSION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> vbRatepage
    return eligibleDecisions;
}

}